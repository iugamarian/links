#define F_CPU 1200000UL	// 9,6MHz/8  http://www.avrfreaks.net/forum/attiny13-system-clock-and-io-clock

// (F)recuency of (note) (normal / plus a semitone) (scale A B C D E F)
// https://en.wikipedia.org/wiki/Scale_(music)
// https://en.wikipedia.org/wiki/Musical_note
//  # note = plus a semitone
//  b note = minus a semitone
// C MAJOR SCALE = SCALE C HERE = STARTS FROM ONE LINE UNDER THE SCORE AND ENDS AT MIDDLE OF SCORE
// C MAJOR SCALE HAS IN THE MIDDLE OF IT THE SOL KEY START POINT AT THE SOL NOTE, ON LINE 2
// THE NEXT DO FOR D SCALE IS BETWEEN LINE 3 AND LINE 4
//
// ASCII ART REPRESENTATION OF SCALES C AND D HERE WITH THEIR NOTES:
//
//																			FSIND
//																	---FLAND---
//																 FSOLND
//----------------------------------------------------------FFAND------------------
//													   FMIND						SCALE D AREA (OPTIMUM FOR BUZZER)
//------------------------------------------------FREND----------------------------
//											 FDOND
//--------------------------------------FSINC--------------------------------------
//								   FLANC
//--SOL-KEY-START------------FSOLNC------------------------------------------------
//						FFANC														SCALE C AREA (OPTIMUM FOR SPEAKER)
//-----------------FMINC-----------------------------------------------------------
//			  FRENC
//    ---FDONC---

#define FDONA	131
#define FDOSA	139
#define FRENA	147
#define FRESA	156
#define FMINA	165
#define FFANA	175
#define FFASA	185
#define FSOLNA	196
#define FSOLSA	208
#define FLANA	220
#define FLASA	233
#define FSINA	247
#define FDONB	262
#define FDOSB	277
#define FRENB	294
#define FRESB	311
#define FMINB	330
#define FFANB	349
#define FFASB	370
#define FSOLNB	392
#define FSOLSB	415
#define FLANB	440
#define FLASB	466
#define FSINB	494
#define FDONC	523
#define FDOSC	554
#define FRENC	587
#define FRESC	622
#define FMINC	659
#define FFANC	698
#define FFASC	740
#define FSOLNC	784
#define FSOLSC	831
#define FLANC	880
#define FLASC	932
#define FSINC	988
#define FDOND	1047
#define FDOSD	1109
#define FREND	1175
#define FRESD	1245
#define FMIND	1319
#define FFAND	1397
#define FFASD	1480
#define FSOLND	1568
#define FSOLSD	1661
#define FLAND	1760
#define FLASD	1865
#define FSIND	1976
#define FDONE	2093
#define FDOSE	2217
#define FRENE	2349
#define FRESE	2489
#define FMINE	2637
#define FFANE	2794
#define FFASE	2960
#define FSOLNE	3136
#define FSOLSE	3322
#define FLANE	3520
#define FLASE	3729
#define FSINE	3951
#define FDONF	4186
#define FDOSF	4435
#define FRENF	4699
#define FRESF	4978
#define FMINF	5274
#define FFANF	5588
#define FFASF	5920
#define FSOLNF	6272
#define FSOLSF	6645
#define FLANF	7040
#define FLASF	7459
#define FSINF	7902

#include <avr/io.h>
#include <util/delay.h>

void var_delay_us(uint16_t);
void makesnd(uint16_t, uint8_t);	// FREQUENCY, DURATION


//---------------MAIN---------------------------------------------
int main(){
  _delay_ms(200);	// longer than slave


// x<<y needs to always be in paranthesis () or else error !!!

  DDRB |= (1<<DDB3); // buzzer out
  DDRB &=~ (1<<DDB4); // button in
  PORTB &=~ (1<<PB3); // buzzer low
	while (1)
	{
		//[...]
		if (!(PINB &(1<<DDB4)))		// detect down
		{
			_delay_ms(20); // DEBOUNCE 1
			if (!(PINB &(1<<DDB4)))		// detect down
			{
				_delay_ms(20); // DEBOUNCE 2
				if ((PINB &(1<<DDB4)))		// detect up - was a mistake but after 15 seconds
							// when LED stays always on, buzzer stops and it's better this way, so leaving unchanged
							// as a side effect, when you disable, it buzzez one more time mostly - that is also good
				{

// do, re, mi, fa, sol, la, si, do, do, si, la, sol, fa, mi, re, do
					makesnd(FDOND,4);
					makesnd(FREND,4);
					makesnd(FMIND,4);
					makesnd(FFAND,4);
					makesnd(FSOLND,4);
					makesnd(FLAND,4);
					makesnd(FSIND,4);
					makesnd(FDONE,4);
					_delay_ms(250);
					makesnd(FDONE,4);
					makesnd(FSIND,4);
					makesnd(FLAND,4);
					makesnd(FSOLND,4);
					makesnd(FFAND,4);
					makesnd(FMIND,4);
					makesnd(FREND,4);
					makesnd(FDOND,4);
					_delay_ms(250);
				}
			}
		}
		//[...]
		_delay_ms(20);	// delay to let microcontroller rest and not make a lot of noise to the sensor
	}
}
//-----------END MAIN---------------------------------------------

void var_delay_us(uint16_t usvar)	// allow delays without constant, for buzzer
{
	// =1/7902/5 resolution 5 times bigger than highest frequency 7902 => 0.00002531005 s ~= 25 us + 1 clock calcul usvar--
	// not smaller than 10 us because UC instruction times interference will make the time unit incorrect
  while (usvar-- != 0)
    _delay_us(25);	
}

void makesnd(uint16_t frequency, uint8_t duration)	// duration represented as 16 for one second, linear
{
//		frequency=frequency/2;	// this is int, all fractions are lost
		uint16_t sinusoidrepetition = 0;	// number of sinusoids
		uint16_t sinusoidtime = 0;			// length of time for a sinusoid
//		tempo is usually 120 beats per minute - half a second, number written down 2/2=half second 4/4=quarter second
//		https://en.wikipedia.org/wiki/Tempo
		uint8_t tempo = 2; // the bigger, the shorter the note at the same frequency (parts of a second)
		sinusoidrepetition = duration*frequency/tempo/16;
		sinusoidtime=1000000/25/frequency;	// 25 us is the var_delay_us time unit, 1000000 us is one second
		sinusoidtime=sinusoidtime/2; // one pulse is composed of an up and a down, time used is half
   		while(sinusoidrepetition){
			var_delay_us(sinusoidtime);	// buzzer frequency
			PORTB |= (1<<PB3);
//			PORTB = 0x0f;
			var_delay_us(sinusoidtime);	// buzzer frequency
			PORTB &=~ (1<<PB3);
//			PORTB = 0x00;
    	 	sinusoidrepetition--;
		}
//		_delay_ms(25);
}
